import { EleventyI18nPlugin } from '@11ty/eleventy'
import faviconsPlugin from 'eleventy-plugin-gen-favicons'

import markdownIt from 'markdown-it'
import markdownItAttrs from 'markdown-it-attrs'
import markdownItContainer from 'markdown-it-container'
import markdownItLinkAttr from 'markdown-it-link-attributes'
import htmlMinifier from 'html-minifier-terser'

/** @param {import("@11ty/eleventy").UserConfig} eleventyConfig */
export default function (eleventyConfig) {
  // copy the contents of the static folder to the output folder
  eleventyConfig.addPassthroughCopy({
    'src/static/': '/',
  })

  // favicon
  eleventyConfig.addPlugin(faviconsPlugin, {
    generateManifest: false,
  })

  // i18n
  eleventyConfig.addPlugin(EleventyI18nPlugin, {
    defaultLanguage: 'en',
    errorMode: 'allow-fallback',
  })

  const md = markdownIt({
    html: true,
    breaks: true,
    linkify: true,
  })

  eleventyConfig.addGlobalData('layout', 'base')

  eleventyConfig.addFilter('markdown', (content) => {
    return md.render(content)
  })

  eleventyConfig.addCollection('content_en', (collections) => {
    return collections.getFilteredByGlob('src/content/en/*.md')
  })

  eleventyConfig.addCollection('content_ru', (collections) => {
    return collections.getFilteredByGlob('src/content/ru/*.md')
  })

  eleventyConfig.addTransform('htmlmin', (content, outputPath) => {
    if (
      outputPath &&
      outputPath.endsWith('.html') &&
      process.env.NODE_ENV === 'production'
    ) {
      return htmlMinifier.minify(content, {
        useShortDoctype: true,
        collapseBooleanAttributes: true,
        collapseWhitespace: true,
        decodeEntities: true,
        includeAutoGeneratedTags: false,
        removeComments: true,
        minifyJS: true,
        minifyCSS: true,
      })
    }
    return content
  })

  eleventyConfig.setLibrary(
    'md',
    md
      .use(markdownItAttrs)
      .use(markdownItContainer, 'dynamic', {
        validate: () => true,
        render: (tokens, idx) => {
          const token = tokens[idx]
          if (token.nesting === 1) {
            return '<div class="' + token.info.trim() + '">'
          } else {
            return '</div>'
          }
        },
      })
      .use(markdownItLinkAttr, [
        {
          matcher(href) {
            return href.match(/^https?:\/\//g)
          },
          attrs: {
            target: '_blank',
            rel: 'noopener noreferrer',
          },
        },
      ]),
  )

  return {
    dir: {
      input: 'src',
      output: '_site',
      data: '_data',
      includes: '_includes',
      layouts: '_layouts',
    },
    templateFormats: ['md', 'njk', 'html'],
    markdownTemplateEngine: 'njk',
    htmlTemplateEngine: 'njk',
    dataTemplateEngine: 'njk',
  }
}
